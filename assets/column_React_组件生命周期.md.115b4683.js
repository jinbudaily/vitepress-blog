import{_ as e,v as o,b as t,R as c}from"./chunks/framework.e2f4824a.js";const l="/vitepress-blog/assets/生命周期.78fd59d9.png",f=JSON.parse('{"title":"组件的生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"column/React/组件生命周期.md","filePath":"column/React/组件生命周期.md"}'),n={name:"column/React/组件生命周期.md"},d=c('<h1 id="组件的生命周期" tabindex="-1">组件的生命周期 <a class="header-anchor" href="#组件的生命周期" aria-label="Permalink to &quot;组件的生命周期&quot;">​</a></h1><p>组件的生命周期包含<code>挂载mount、更新update、卸载unmount</code>三个阶段</p><ol><li>挂载过程中有四个周期方法：</li></ol><ul><li><code>constructor()</code>：只有在组件实例化的时候才会被调用，可以设置初始化状态及绑定类方法</li><li><code>componentWillMount()</code>：组件挂载之前</li><li><code>render</code>：必须存在，<strong>返回需要渲染的内容，这个方法应该是一个纯函数，不应该在这个方法中修改组件的状态。</strong></li><li><code>componentDidMount</code>：组件挂载完毕，<strong>是发起异步请求去API获取数据的绝佳时期。</strong></li></ul><ol start="2"><li>当组件状态<code>state</code>或属性<code>props</code>发生改变时，组件更新，组件更新时候的生命周期方法如下：</li></ol><ul><li><code>componentWillReceiveProps(nextProps)</code>：基于新的属性和之前的属性作出对比，从而基于对比的结果去实现不同的行为。</li><li><code>shouldComponentUpdate(nextProps, nextState)</code>：每次组件因为属性或者状态修改的时候，都会被调用，返回一个布尔值，组件及子组件会根据这个布尔值来决定是否需要重新<code>render</code>, 这样可以避免不必要的渲染。</li><li><code>componentWillUpdate(nextProps,nextState)： 这里拿到了最新的数据和状态，可以做渲染之前最后的准备，但是不要再触发</code>setState`</li><li><code>render()</code></li><li><code>componentDidUpdate()</code>： 组件更新之后，在<code>render</code>之后立即调用。</li></ul><ol start="3"><li>组件卸载时的生命周期</li></ol><ul><li><code>componentWillUnmount()</code>: 组件销毁之前被调用，常用来执行清理任务。</li></ul><p><img src="'+l+'" alt=""></p>',9),i=[d];function s(r,a,p,u,m,_){return o(),t("div",null,i)}const x=e(n,[["render",s]]);export{f as __pageData,x as default};
