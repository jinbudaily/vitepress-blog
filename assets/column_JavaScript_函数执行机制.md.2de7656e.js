import{_ as s,v as n,b as a,R as l}from"./chunks/framework.e2f4824a.js";const p="/vitepress-blog/assets/函数执行机制.ab51799b.png",o="/vitepress-blog/assets/1638954854728-efc74d40-6196-4ea1-828d-06b1436fb52f.10931462.png",g=JSON.parse('{"title":"函数执行机制","description":"","frontmatter":{},"headers":[],"relativePath":"column/JavaScript/函数执行机制.md","filePath":"column/JavaScript/函数执行机制.md"}'),t={name:"column/JavaScript/函数执行机制.md"},e=l(`<h1 id="函数执行机制" tabindex="-1">函数执行机制 <a class="header-anchor" href="#函数执行机制" aria-label="Permalink to &quot;函数执行机制&quot;">​</a></h1><p>函数的执行过程中发生了什么？</p><ol><li>执行上下文栈（ECStack)</li><li>全局执行上下文(EC(G))/函数执行上下文</li><li>变量提升</li><li>作用域链（作用域链查找机制）</li><li>arguments</li></ol><h2 id="_1-函数的底层运行机制" tabindex="-1">1. 函数的底层运行机制 <a class="header-anchor" href="#_1-函数的底层运行机制" aria-label="Permalink to &quot;1. 函数的底层运行机制&quot;">​</a></h2><p><strong>函数执行时发生了什么？</strong></p><ol><li>创建一个全新的私有执行上下文【进栈（执行上下文栈）执行】，函数中的代码都是在这个私有上下文中执行 <ol><li><strong>私有变量对象AO</strong>(Active Object),是VO的分支，在私有上下文中声明的变量都存储在这里</li></ol></li><li>完成很多要执行的步骤： <ol><li>初始化作用域链&lt;自己私有上下文，函数作用域（上级上下文)&gt; <ol><li><strong>当函数代码执行，遇到一个变量首先看是否为自己上下文中的私有变量，如果是则操作自己的，如果不是，则按照作用域链去上级上下文中查找，如果还没有，则继续向上查找，直到找到EC(G)/GO为止，在查找过程中，找到是谁的就操作谁的 （变量/作用域链查找机制）</strong></li></ol></li><li>初始化this(箭头函数没有这一步）</li><li>初始化arguments（箭头函数没有这一步）</li><li>形参赋值</li><li>变量提升 <ol><li>形参赋值、变量提升、私有上下文中声明的变量，都是私有变量，都存放在当前上下文的AO中</li></ol></li></ol></li><li>代码执行</li><li>出栈释放或保留(保留形成闭包）</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">23</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 函数也会开辟堆内存，函数堆内存中会存放3部分内容</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1. 声明函数的作用域 scope: 当前所在的上下文（当前函数在哪个上下文中创建的，作用域就是谁）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 把函数体中的代码当做字符串存储起来</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. 键值对,比如 name:fn, length：形参个数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// y是传递的形参</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 函数执行传递实参</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">(x)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [100,200]</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(x)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [100,23]</span></span></code></pre></div><p><img src="`+p+`" alt="Xnip2021-11-21_10-28-27.jpg"></p><h2 id="_2-执行上下文" tabindex="-1">2. 执行上下文 <a class="header-anchor" href="#_2-执行上下文" aria-label="Permalink to &quot;2. 执行上下文&quot;">​</a></h2><ul><li>全局上下文（EC(G))</li><li>函数私有上下文（EC(FN）</li><li>块级私有上下文（EC(BLOCK)) <ul><li>产生私有上下文 ---&gt; 进栈执行 ---&gt; 出栈释放（可能释放）</li></ul></li><li>变量对象：当前上下文中，用来存储声明的变量的地方 <ul><li>VO（Varibale Object）：VO(G) 或者 VO(BLOCK)</li><li>AO（Active Object）：AO()</li></ul></li><li>GO（Global Object）全局对象 <ul><li>window 指向 GO 对象</li><li>全局上下文中，基于var/function声明的变量是直接存储到GO对象上的；而基于let/const声明的变量才是存放在VO(G)中的；</li></ul></li></ul><h2 id="_3-变量提升" tabindex="-1">3. 变量提升 <a class="header-anchor" href="#_3-变量提升" aria-label="Permalink to &quot;3. 变量提升&quot;">​</a></h2><p><a href="https://juejin.cn/post/6933377315573497864" target="_blank" rel="noreferrer">彻底解决 JS 变量提升| 一题一图，超详细包教包会😉</a></p><p><strong>在“当前上下文”中，代码执行之前，浏览器首先会把所有带var/function关键字的进行提前声明或者定义：带var的只是提前声明 &amp; 带function的，此阶段声明+定义{赋值}都完成了</strong></p><ul><li>let/const/import/class声明的变量不存在变量提升</li><li>重复声明的问题</li><li><strong>推荐使用函数表达式</strong>，确保函数执行只能放在“创建函数”的下面，保证逻辑严谨性</li><li>条件判断：在当前上下文中，变量提升阶段，不论条件是否成立，都要进行变量提升 <ul><li>var：还是只声明</li><li>function：判断体中的函数，在变量提升阶段，只声明不赋值「函数是个渣男」</li></ul></li></ul><ol><li>其实最开始浏览器从服务器端获取的js都是文本（字符串），只不过声明了格式是【Content-Type:application/javascript】，浏览器首先按照这个格式去解析代码 ---&gt; <strong>“词法解析”阶段</strong>，目标是生成<strong>AST词法解析树</strong></li><li><strong>基于let/const等声明的变量，在词法解析阶段，其实就已经明确了，未来在此上下文中，必然会存在这些变量（类似于变量提升，但是并没有声明）（也可以理解为暂时性死区）</strong></li><li>但是在代码执行中，如果出现了在具体声明的代码之前使用这些变量，浏览器则会抛出错误</li><li>真实项目中，目前推荐使用 函数表达式的方式（把函数作为值赋值给变量） 创建函数：这样抛开了变量提升的机制，导致函数的执行只能在创建函数代码之后，保证逻辑的严谨性！！</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// var a = undefined;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// a = 12</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//--------------------------------</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 为什么错误不是 b is not defined ?</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b) </span><span style="color:#676E95;font-style:italic;">// Reference Error: Cannot access &#39;b&#39; before initialization</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 词法分析</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 其实最开始浏览器从服务器端获取的js都是文本（字符串），只不过声明了格式是【Content-Type:application/javascript】，浏览器首先按照这个格式去解析代码 ===&gt; “词法解析”阶段，目标是生成“AST词法解析树“</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 基于let/const等声明的变量，在词法解析阶段，其实就已经明确了，未来在此上下文中，必然会存在这些变量（类似于变量提升，但是并没有声明）（也可以理解为暂时性死区）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 但是在代码执行中，如果出现了在具体声明的代码之前使用这些变量，浏览器则会抛出错误</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(fn)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(fn)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(fn)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(fn)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">ƒ fn(){ console.log(2); }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">ƒ fn(){ console.log(2); }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">12</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">12</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">VO(G)/GO</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    fn ---&gt; 0x001 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    fn ---&gt; 0x002 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">变量提升：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">function fn() {console.log(1)} 0x001</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">var fn; // 上下文中已经存在fn变量了，不会重复声明</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">function fn() {console.log(2)} 0x002</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">代码执行：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    输出fn() {console.log(2)}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    跳过fn函数的声明加定义（变量提升阶段已经处理过了）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    输出fn() {console.log(2)}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    跳过var fn操作，但是赋值的操作需要执行 fn = 12</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    输出12</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    跳过fn() {console.log(2)}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    输出12</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;a&#39; in window 验证key是否是obj的一个属性，不论是私有的还是公有的属性，只要是属性，结果就是true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// !true = false，条件不成立，不进入逻辑判断 var a = undefined</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> window)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">EC(G)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  1. VO(G)/GO</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  2. 变量提升：不论条件是否成立，都要进行变量提升（对于var来讲新老版本浏览器没有任何影响，但是对于判断体中出现的function来讲，新老版本表现不一致：老版本 函数还是声明+定义  新版本 函数只会声明，不再定义）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    var a;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 真实项目中，目前推荐使用 函数表达式的方式（把函数作为值赋值给变量） 创建函数：这样抛开了变量提升的机制，导致函数的执行只能在创建函数代码之后，保证逻辑的严谨性！！</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_4-块级上下文" tabindex="-1">4. 块级上下文 <a class="header-anchor" href="#_4-块级上下文" aria-label="Permalink to &quot;4. 块级上下文&quot;">​</a></h2><p>上下文：全局上下文、函数执行产生的私有上下文，ES6规范中新提供的块级私有上下文 <strong>除“函数和对象”的大括号外「例如：判断体/循环体/代码块…」，如果在大括号中出现了 let/const/function/class 等关键词声明变量，则当前大括号会产生一个“块级私有上下文”；它的上级上下文是所处的环境；var不产生块级上下文，也不受块级上下文的影响；</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 判断体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 循环体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 代码块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//忽略报错的影响</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> EC(G) </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   VO(G)/GO</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     a -&gt; （12）---&gt; 100</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     b -&gt; 13</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   变量提升：var a;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// console.log(b); // Error</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 产生一个块级私有上下文 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 EC(BLOCK) 块级私有上下文</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    VO(BLOCK)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        b -&gt; 200</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    作用域链：&lt;EC(BLOCK),EC(G)&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    没有this和arguments,也没有形参赋值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    变量提升：带var关键字的不受任何块的影响(!!!)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 12, 向上级作用域中查找</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// console.log(b); // Uncaught ReferenceError: Cannot access &#39;b&#39; before initialization 在块级上下文中，未来一定存在基于let声明的b，所以不允许在定义之前使用</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 全局的a更改为100</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 100</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 私有的b: 200</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 全局的a: 100</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 全局的b: 13</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 函数是个渣男</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// foo只是先声明</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(foo)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 在块作用域中有变量提升：function() {}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// ƒ foo() {}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 把本行代码以上，对foo的所有操作，同步给全局一份，之后对foo的操作与全局无关</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(foo)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// ƒ foo() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在新版本浏览器中，按照ES6新语法规范</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1. 判断体中出现的function, 不论条件是否成立，都只是先声明，不定义</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 判断体中出现function会产生块级私有上下文</span></span></code></pre></div><p><img src="`+o+`" alt="Xnip2021-11-21_12-10-14.jpg"><a href="https://blog.csdn.net/k358971707/article/details/56684575" target="_blank" rel="noreferrer">web前端一道很坑的面试题</a></p><p><a href="https://www.cnblogs.com/haogj/p/3926715.html" target="_blank" rel="noreferrer">题目解析</a></p><p><a href="https://www.cnblogs.com/leolai/p/2541838.html" target="_blank" rel="noreferrer">一道关于js函数的前端面试题引发的血案</a></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">f</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;};</span></span>
<span class="line"><span style="color:#82AAFF;">g</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;};</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">g</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> [] </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">[]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">g</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">f</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">g</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_5-arguments" tabindex="-1">5. arguments <a class="header-anchor" href="#_5-arguments" aria-label="Permalink to &quot;5. arguments&quot;">​</a></h2><ol><li>arguments对象是所有函数都具有的一个内置局部变量，表示的是函数实际接收的参数，是一个<strong>类数组结构</strong></li></ol><blockquote><p>类数组结构通常有索引和Length属性，但是不具备数组的一些方法</p></blockquote><ol start="2"><li>arguments只能在函数内部使用，无法在函数外部访问到arguments对象</li><li><strong>arguments对象的值由实参决定，而不是由定义的形参决定</strong><ol><li>arguments对应的length在函数调用的时候已经确定，不会随着函数的处理而改变</li><li>指定的形参在传递实参的情况下，arguments对象与形参值相同，并且可以相互改变</li><li>指定的形参在未传递实参的情况下，arguments对象对应索引值返回“undefined”</li><li>指定的形参在传递实参的情况下，arguments对象与形参值不能相互改变</li></ol></li><li>arguments对象有一个特殊的属性<code>callee</code>,表示的是当前正在执行的函数（常用在匿名函数内部需要对自身进行调用时）（但是并不推荐这样做，因为使用arguments.callee会改变内部的this值）</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 11</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]) </span><span style="color:#676E95;font-style:italic;">// 12</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#F07178;">}</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// arguments对象的应用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1. 检查传递的参数个数是否正确</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">z</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  	</span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">期望传递3个参数</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// do something</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 定义一个特定处理参数的函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">joinStr</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">seperator</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// arguments是一个类数组结构，可以通过call调用slice方法</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">strArr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">strArr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">seperator</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. 模拟函数重载</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// js没有函数重载</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// - 形参无法确定类型</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// - 函数的参数个数无法确定</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// - 后面的函数覆盖前面的函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 通过求和函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 得到函数参数数组</span></span>
<span class="line"><span style="color:#F07178;">	 </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">pre</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">curr</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pre</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">curr</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,34),c=[e];function r(y,i,F,D,C,A){return n(),a("div",null,c)}const E=s(t,[["render",r]]);export{g as __pageData,E as default};
