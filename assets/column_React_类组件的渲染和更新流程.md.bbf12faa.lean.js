import{_ as s,v as n,b as a,R as l}from"./chunks/framework.e2f4824a.js";const o="/vitepress-blog/assets/1686575818570-03dac13a-298d-40d5-be06-3b921067bec8-20230823235746307.db6d36cf.png",d=JSON.parse('{"title":"类组件的渲染和更新流程","description":"","frontmatter":{},"headers":[],"relativePath":"column/React/类组件的渲染和更新流程.md","filePath":"column/React/类组件的渲染和更新流程.md"}'),p={name:"column/React/类组件的渲染和更新流程.md"},e=l(`<h1 id="类组件的渲染和更新流程" tabindex="-1">类组件的渲染和更新流程 <a class="header-anchor" href="#类组件的渲染和更新流程" aria-label="Permalink to &quot;类组件的渲染和更新流程&quot;">​</a></h1><h3 id="创建类组件" tabindex="-1">创建类组件 <a class="header-anchor" href="#创建类组件" aria-label="Permalink to &quot;创建类组件&quot;">​</a></h3><p>创建类组件要求必须继承<code>React.Component/PureComponent</code>这个类, 且必须给当前类设置一个<code>render</code>的方法「放在其原型上」：在<code>render</code>方法中，返回需要渲染的视图</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vote</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">        )</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> Vote</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Component</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">updater</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">refs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">updater</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updater</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ReactNoopUpdateQueue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Parent</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">        )</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> Parent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">render函数在渲染的时候，如果type是：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">- 字符串：创建一个标签</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">- 普通函数：把函数执行，并且把props传递给函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">- 构造函数：把构造函数基于new执行（创建类的实例），把解析的props传递过去</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    - 每调用一次类组件都会创建一个单独的实例</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    - 把类组件编写的render函数执行，把返回的jsx(虚拟DOM）当做组件视图进行渲染。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre></div><p>基于<code>extends</code>实现继承的过程</p><ol><li>首先基于<code>call</code>继承 ，<code>React.Component.call(this)</code>，<strong>给创建的组件实例设置四个私有属性</strong>: <code>props、context、refs、updater</code></li><li>再基于原型继承，<code>Parent.prototype.__proto__ === React.Component.prototype</code></li></ol><ul><li><code>paretnt —&gt; Parent.prototype -&gt; React.Component.prototype -&gt; Object.prototype</code></li><li>实例除了具备<code>Parent.prototype</code>提供的方法之外，还具备了<code>React.Component.prototype</code>原型上提供的方法：<code>isReactComponent, setState, forceUpdate</code></li></ul><ol start="3"><li>只要自己设置了<code>constructor,</code>则内部第一行代码要执行<code>super()</code></li></ol><h3 id="类组件的渲染流程" tabindex="-1">类组件的渲染流程 <a class="header-anchor" href="#类组件的渲染流程" aria-label="Permalink to &quot;类组件的渲染流程&quot;">​</a></h3><p>从调用类组件<code>new Vote({})</code>开始，类组件内部发生的事情：</p><ol><li><code>初始化属性 &amp;&amp; 规则校验</code>, 先规则校验，校验完毕后，再处理属性的其他操作</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">constructor</span><span style="color:#A6ACCD;">(props) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//会把传递进来的属性挂载到this实例上</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//获取到传递的属性</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>即便我们自己不在<code>constructor</code>中处理(或者<code>constructor</code>都没写)，在<code>constructor</code>处理完毕后，React内部也会把传递的props挂载到实例上；所以在其他的函数中，只要保证<code>this</code>是实例，就可以基于<code>this.props</code>获取传递的属性, <code>this.props</code>获取的属性对象是被冻结的(只读的)</p><ol start="2"><li><code>初始化状态</code><ol><li>如果我们没有做任何的处理，<code>React</code>内部会帮我们默认设置一个<code>state</code>, 值为<code>null</code>, 即<code>this.state = null</code></li><li>更多的时候，我们是用代码的方式手动指定，<code>state = {}</code></li><li>当通过<code>setState</code>修改<code>state</code>中的值时，会触发<code>React</code>的更新流程，但是如果我们使用了<code>this.state.xxx = newValue</code>这样的方式，只会改变<code>state</code>中的值，并不会触发更新流程。</li><li>我们还可以通过<code>forceUpdate</code>的方式强制视图更新</li></ol></li><li>触发<code>componentWillMount</code>生命周期函数(生命周期钩子）</li></ol><blockquote><p>🧡 钩子函数：在程序运行到某个阶段，我们可以基于提供一个处理函数，让开发者在这个阶段做一些自定义的事情</p></blockquote><ul><li><code>React</code>官方打算移除这个生命周期函数，所以将这个函数设置为<code>不安全的</code>，所以会在控制台中输出黄色警告⚠️， 如果想要移除这个黄色警告，可以使用 <code>UNSAFE_componentWillMount</code></li><li>如果我们开启了<code>StrictMode严格模式</code>（检查不规范的语法或不建议使用的API） ，则使用<code>UNSAFE_componentWillMount</code>时，控制台会直接发出红色警告🚨</li></ul><ol start="4"><li>触发<code>render</code>函数，渲染内容</li><li>触发<code>componentDidMount</code>生命周期函数，第一次渲染完毕，在此阶段我们可以拿到<code>DOM</code>元素</li></ol><h3 id="类组件的更新流程" tabindex="-1">类组件的更新流程 <a class="header-anchor" href="#类组件的更新流程" aria-label="Permalink to &quot;类组件的更新流程&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">INFO</p><p>组件更新的逻辑「第一种：组件内部的状态被修改，组件会更新」</p><ol><li>触发 <code>shouldComponentUpdate</code>周期函数：是否允许更新, 返回结果为<code>true/flase</code>, 如果结果为<code>true</code>, 则允许更新，并执行后面的操作，如果返回结果为<code>false</code>,则不进行更新</li><li>触发 <code>componentWillUpdate</code>周期函数：更新之前</li></ol><ul><li>此周期函数也是不安全的, 在这个阶段，状态/属性还没有被修改</li></ul><ol start="3"><li>修改状态值/属性值<code>setState</code>, 让<code>this.state.xxx</code>改为最新的值</li><li>触发 <code>render </code>周期函数：组件更新</li></ol><ul><li>按照最新的状态/属性，把返回的JSX编译为virtualDOM</li><li>和上一次渲染出来的virtualDOM进行对比<code>「DOM-DIFF」</code></li><li>把差异的部分进行渲染「渲染为真实的DOM」</li></ul><ol start="5"><li>触发<code>componentDidUpdate</code>周期函数：组件更新完毕</li></ol><p>特殊说明：如果我们是基于 <code>this.forceUpdate()</code>强制更新视图，会跳过 <code>shouldComponentUpdate</code>周期函数的校验，直接从<code>componentWillUpdate</code>开始进行更新「也就是：视图一定会触发更新」！</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>组件更新的逻辑「第二种：父组件更新，触发的子组件更新」</p><ol><li>触发 <code>componentWillReceiveProps </code>周期函数：接收最新属性之前, 该周期函数是不安全的</li><li>触发 <code>shouldComponentUpdate</code> 周期函数</li></ol><p>之后的操作和组件的第一种更新逻辑相同</p><p>组件卸载的逻辑</p><ol><li>触发 <code>componentWillUnmount</code>周期函数：组件销毁之前</li><li>销毁</li></ol><p>父子组件嵌套，处理机制上遵循<strong>深度优先</strong>原则：父组件在操作中，遇到子组件，一定是把子组件处理完，父组件才能继续处理</p><ul><li><em>父组件第一次渲染</em></li></ul><p>父 willMount -&gt; 父 render「子 willMount -&gt; 子 render -&gt; 子didMount」 -&gt; 父didMount</p><ul><li><em>父组件更新：</em></li></ul><p>父 shouldUpdate -&gt; 父willUpdate -&gt; 父 render 「子willReceiveProps -&gt; 子 shouldUpdate -&gt; 子willUpdate -&gt; 子 render -&gt; 子 didUpdate」-&gt; 父 didUpdate</p><ul><li><em>父组件销毁：</em></li></ul><p>父 willUnmount -&gt; 处理中「子willUnmount -&gt; 子销毁」-&gt; 父销毁</p></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">shouldComponentUpdate</span><span style="color:#A6ACCD;">(nextProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">nextState) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// nextState:存储要修改的最新状态</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// this.state:存储的还是修改前的状态「此时状态还没有改变」</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextState</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 此周期函数需要返回true/false</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">//   返回true：允许更新，会继续执行下一个操作</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">//   返回false：不允许更新，接下来啥都不处理</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">UNSAFE_componentWillUpdate</span><span style="color:#A6ACCD;">(nextProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nextState) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">componentWillUpdate:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextProps</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">UNSAFE_componentWillReceiveProps</span><span style="color:#A6ACCD;">(nextProps) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// this.props:存储之前的属性</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// nextProps:传递进来的最新属性值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">componentWillReceiveProps:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextProps</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="purecomponent" tabindex="-1"><code>PureComponent</code> <a class="header-anchor" href="#purecomponent" aria-label="Permalink to &quot;\`PureComponent\`&quot;">​</a></h3><p>当我们定义类组件的时候，通常有以下两种形式：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Demo1</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">PureComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Demo2</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre></div><p>那么，定义的组件继承<code>PureComponent/Component</code>有什么区别吗？</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>相比于<code>Component</code>, <code>PureComponent</code>会给类组件默认加一个<code>shouldComponentUpdate</code>周期函数</p><ul><li><em>在此周期函数中，它对新老的属性/状态 会做一个<strong>浅比较</strong></em></li><li><em>如果经过浅比较，发现属性和状态并没有改变，则返回false「也就是不继续更新组件」；有变化才会去更新！！</em></li></ul></div><h3 id="" tabindex="-1"><img src="`+o+`" alt="image.png"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;![image.png](../pics/1686575818570-03dac13a-298d-40d5-be06-3b921067bec8-20230823235746307.png)&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 检测是否为对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> isObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isObject</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对象浅比较的方法</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> shallowEqual </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowEqual</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">objA</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">objB</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">isObject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">objA</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">isObject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">objB</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">objA</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">objB</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 先比较成员的数量</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">keysA</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ownKeys</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">objA</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">keysB</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ownKeys</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">objB</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">keysA</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">keysB</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 数量一致，再逐一比较内部的成员「只比较第一级：浅比较」</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">keysA</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">keysA</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果一个对象中有这个成员，一个对象中没有；或者，都有这个成员，但是成员值不一样；都应该被判定为不相同！！</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">objB</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">objA</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">objB</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">])) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 以上都处理完，发现没有不相同的成员，则认为两个对象是相等的</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">shouldComponentUpdate</span><span style="color:#A6ACCD;">(nextProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nextState) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// props/state：修改之前的属性状态</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// nextProps/nextState：将要修改的属性状态</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 有一项返回结果为false(props或者state更改), shouldComponentUpdate才会返回true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">shallowEqual</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextProps</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">shallowEqual</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextState</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当往state中的arr进行操作后，arr的地址并没有更改，为了让组件更新，复制一份放在新数组中</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">arr</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arr] </span><span style="color:#676E95;font-style:italic;">//我们是让arr状态值改为一个新的数组「堆地址」</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="对象的密封、冻结和封装" tabindex="-1">对象的密封、冻结和封装 <a class="header-anchor" href="#对象的密封、冻结和封装" aria-label="Permalink to &quot;对象的密封、冻结和封装&quot;">​</a></h3><ol><li>冻结 冻结对象：<code>Object.freeze(obj)</code> 检测是否被冻结：<code>Object.isFrozen(obj) =&gt; true/false</code> 被冻结的对象：不能修改成员值、不能新增成员、不能删除现有成员、不能给成员做劫持<code>Object.defineProperty</code></li><li>密封 密封对象：<code>Object.seal(obj)</code> 检测是否被密封：<code>Object.isSealed(obj)</code> 被密封的对象：<strong>可以修改成员的值</strong>，但也不能删、不能新增、不能劫持</li><li>扩展 把对象设置为不可扩展：<code>Object.preventExtensions(obj)</code> 检测是否可扩展：<code>Object.isExtensible(obj)</code> 被设置不可扩展的对象：除了不能新增成员、其余的操作都可以处理 被冻结的对象，既是不可扩展的，也是密封的，同理，被密封的对象，也是不可扩展的。</li></ol>`,32),t=[e];function c(r,y,F,D,i,C){return n(),a("div",null,t)}const u=s(p,[["render",c]]);export{d as __pageData,u as default};
